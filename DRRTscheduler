#!/bin/bash
# DRRT Alliance Assembler, SUMMER DRRT
### REMEMBER! ONLY WORKS IN WSL!! ###

set -o errexit -o pipefail -o nounset

VERSION="v1.3.0"

MM_NAME="MatchMaker_1_4_0"

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

DRRT_ROOT="${SCRIPT_DIR}/../.."

RED='\033[0;31m'

YELLOW='\033[0;33m'

NOCOLOR='\033[0m'

. "$SCRIPT_DIR/shipIndex.conf"

if [[ ! -d "$SCRIPT_DIR/../Qualifications/" ]]; then
    mkdir "$SCRIPT_DIR/../Qualifications/"
fi

if [[ ! -d "$SCRIPT_DIR/../Playoffs/" ]]; then
    mkdir "$SCRIPT_DIR/../Playoffs/"
fi

if [[ ! -d "$SCRIPT_DIR/../Old-Ships/" ]]; then
    mkdir "$SCRIPT_DIR/../Old-Ships/"
fi

if [[ ! -d "$SCRIPT_DIR/../MatchMaker/" ]]; then
    mkdir "$SCRIPT_DIR/../MatchMaker/"
fi

if [[ "$(ls -A $SCRIPT_DIR/../Qualifications/)" ]]; then
    echo "Deleting contents of 'Qualifications/' . . ."
    
    rm ${SCRIPT_DIR}/../Qualifications/*
fi

MATCHMAKER=$(find "$SCRIPT_DIR/../MatchMaker/" -type f -regex '.*MatchMaker.exe$' -print -quit)

if [[ ! -f $MATCHMAKER ]]; then
    echo "Attempting to download the MatchMaker (MatchMaker.exe). . ."
   
    if [[ ! -f "$SCRIPT_DIR/../MatchMaker/${MM_NAME}.zip" ]]; then
        curl "https://idleloop.com/matchmaker/${MM_NAME}.zip" --output "$SCRIPT_DIR/../MatchMaker/${MM_NAME}.zip"

        if [[ ! $? -eq 0 ]]; then
            echo -e "${RED}ERROR:${NOCOLOR} could not get MatchMaker program!"

            echo "Stop."

            exit 1
        fi
    fi
    
    unzip "$SCRIPT_DIR/../MatchMaker/${MM_NAME}.zip" -d "$SCRIPT_DIR/../MatchMaker/${MM_NAME}/"

    MATCHMAKER=$(find "$SCRIPT_DIR/../MatchMaker/" -type f -regex '.*MatchMaker.exe$' -print -quit)

    echo "$MATCHMAKER"

    if [[ ! -f "$MATCHMAKER" ]]; then
        echo -e "${RED}ERROR:${NOCOLOR} could not find MatchMaker.exe!"

        echo "Stop."

        exit 1
    fi
else
    echo "MatchMaker.exe found."
fi

! getopt --test > /dev/null

if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo '`getopt --test` failed in this environment.'

    exit 1
fi

LONGOPTS=ships:,teams:,rounds:,verbose,help,no-check,gen-schedule

OPTIONS=s:t:r:vhfb

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi

eval set -- "$PARSED"

t=0 r=10 VERBOSE=0 NO_T=1 NO_R=1
QUALITY='-f'
CHECKP=1
GEN_SCHEDULE=0

while true; do
    case "$1" in
        -s|--ships)
            t="$2"

            NO_T=0

            shift 2
            
            ;;
        -t|--teams)
            t="$2"

            NO_T=0

            shift 2
            
            ;;
        -r|--rounds)
            r="$2"

            NO_R=0

            shift 2
            
            ;;
        -v|--verbose)
            VERBOSE=1

            shift
            
            ;;
        -f)
            QUALITY='-f'

            shift

            ;;

        -b)
            QUALITY='-b' 

            shift

            ;;
        --no-check)
            CHECKP=0

            shift

            ;;
        --gen-schedule)
            GEN_SCHEDULE=1

            shift

            ;;
        -h|--help)
            echo "DRRT ALLIANCE SCHEDULER ${VERSION}"
            echo "Generates MATCH SCHEDULE and assembles all QUALIFICATION MATCH ALLIANCES."
            echo 
            echo "Works only in WSL2 on Windows."
            echo 
            echo "Usage:"
            echo
            echo '-v      | --verbose           Enables verbose output.'
            echo 
            echo '-s | -t | --ships | --teams   Sets number of participating ships.'
            echo 
            echo '-r | --rounds                 Sets minimum number of rounds each ship plays. Defaults to 10.'
            echo 
            echo '-h | --help                   Show this help and exit.'
            echo
            echo '-b                            Set schedule generation to Best Quality.'
            echo 
            echo '-f                            Set schedule generation to Fast Quality.'
            echo 
            echo '--no-check                    Prevent participant checking.'
            exit 0
            ;;
        --)

            shift

            break
            
            ;;
        *)
            echo -e "${RED}ERROR:${NOCOLOR} getopt internal error!"

            exit 1
            
            ;;
    esac
done

check_participants () {
    SHIP_NOTFOUND=0

    for k in "${participants[@]}"; do
        if [[ ! -f "$k" ]]; then
            echo -e "${RED}ERROR:${NOCOLOR} check_participants: Ship file '$k' not found!"

            SHIP_NOTFOUND=1
        fi
    done

    if [[ $SHIP_NOTFOUND -eq 1 ]]; then
        echo "Stop."

        exit 1
    else
        echo "check_participants: all ship files found!"
    fi
}

run_matchmaker () {
    echo "Creating a schedule with $t ships each playing in $r Rounds."

    "$MATCHMAKER" -o -t $t -r $r $QUALITY > "$SCRIPT_DIR/rawSchedule.txt"

    echo "rawSchedule.txt generated with MatchMaker.exe output."
 
    echo "Contents of rawSchedule.txt:"

    cat "$SCRIPT_DIR/rawSchedule.txt"
    
    grep '^ [0-9 ][0-9]:' "$SCRIPT_DIR/rawSchedule.txt" | sed 's/^ [0-9 ][0-9]: *//' > "$SCRIPT_DIR/spreadsheetSCH.txt"

    if [[ $GEN_SCHEDULE -eq 1 ]]; then
        echo "Done."
        
        exit 0
    fi
}

assemble () {
    if [[ ! -f "$6" ]]; then
        echo -e "${RED}ERROR:${NOCOLOR} assemble: Not Enough Arguments!"
    
        echo "Stop."
        
        exit 1
    fi    
    
    if [[ ! -f "$1" ]]; then echo "File '$1' not found!"; echo "Stop."; exit 1; fi
    
    if [[ ! -f "$2" ]]; then echo "File '$2' not found!"; echo "Stop."; exit 1; fi
    
    if [[ ! -f "$3" ]]; then echo "File '$3' not found!"; echo "Stop."; exit 1; fi
    
    if [[ ! -f "$4" ]]; then echo "File '$4' not found!"; echo "Stop."; exit 1; fi
    
    if [[ ! -f "$5" ]]; then echo "File '$5' not found!"; echo "Stop."; exit 1; fi
    
    if [[ ! -f "$6" ]]; then echo "File '$6' not found!"; echo "Stop."; exit 1; fi
    
    if [[ "$7" ]]; then
        RED_NAME="$7"
    else
        RED_NAME="Red Alliance"
    fi
    
    if [[ "$8" ]]; then 
        BLUE_NAME="$8"
    else
        BLUE_NAME="Blue Alliance"
    fi

    echo "{     -- Created with DRRTscheduler ${VERSION}
  color0=0x0aa879,
  color1=0x222d84,
  color2=0,
  name=\"$BLUE_NAME\",
  faction=8,
  currentChild=0,
  blueprint={},
  children={},
  blueprints={" > "$SCRIPT_DIR/../Qualifications/$BLUE_NAME.lua"

    zgrep '{data\| \{5,\}' "$4" | sed 's/}}}},/}}},/g' >> "$SCRIPT_DIR/../Qualifications/$BLUE_NAME.lua"
    
    zgrep '{data\| \{5,\}' "$5" | sed 's/}}}},/}}},/g' >> "$SCRIPT_DIR/../Qualifications/$BLUE_NAME.lua"
    
    zgrep '{data\| \{5,\}' "$6" >> "$SCRIPT_DIR/../Qualifications/$BLUE_NAME.lua"
    
    echo "  playerprint={}}" >> "$SCRIPT_DIR/../Qualifications/$BLUE_NAME.lua"
    
    gzip -f "$SCRIPT_DIR/../Qualifications/$BLUE_NAME.lua"
    
    echo "{     -- Created with DRRTscheduler ${VERSION}
  color0=0xbaa01e,
  color1=0x681818,
  color2=0,
  name=\"$RED_NAME\",
  faction=9,
  currentChild=0,
  blueprint={},
  children={},
  blueprints={" > "$SCRIPT_DIR/../Qualifications/$RED_NAME.lua"

    zgrep '{data\| \{5,\}' "$1" | sed 's/}}}},/}}},/g' >> "$SCRIPT_DIR/../Qualifications/$RED_NAME.lua"
    
    zgrep '{data\| \{5,\}' "$2" | sed 's/}}}},/}}},/g' >> "$SCRIPT_DIR/../Qualifications/$RED_NAME.lua"
    
    zgrep '{data\| \{5,\}' "$3" >> "$SCRIPT_DIR/../Qualifications/$RED_NAME.lua"
    
    echo "  playerprint={}}" >> "$SCRIPT_DIR/../Qualifications/$RED_NAME.lua"
    
    gzip -f "$SCRIPT_DIR/../Qualifications/$RED_NAME.lua"
}

if [[ $t -lt 6 && $NO_T -eq 0 ]]; then
    echo -e "${RED}ERROR:${NOCOLOR} $t is lesser than minimum number of ships (6)."

    echo "Stop."

    exit 1
fi

if [[ $r -gt 10 ]]; then
    echo "${YELLOW}WARNING:${NOCOLOR} That's a lot of rounds ($r)! Make sure that all matches were generated!"
fi

if [[ $NO_T -eq 1 && $NO_R -eq 0 ]]; then
    echo -e "${RED}ERROR:${NOCOLOR} Rounds are set, but ship count is not set."

    echo "Stop."
    
    exit 1
fi


if [[ $GEN_SCHEDULE -eq 0 && $CHECKP -eq 1 ]]; then
    check_participants
fi

if [[ -f $SCRIPT_DIR/rawSchedule.txt ]]; then
    echo "A match schedule already exists!"

    while true; do
        if [[ $NO_T -eq 1 ]]; then
            REPLY="n"
        elif [[ $GEN_SCHEDULE -eq 1 ]]; then
            REPLY="y"
        else
            read -p "Generate new schedule? [Y/n]: " -n 1 -r
        fi

        case $REPLY in
            [Yy]* ) 
                rm "$SCRIPT_DIR/rawSchedule.txt"

                rm "$SCRIPT_DIR/spreadsheetSCH.txt"

                run_matchmaker 

                if [[ $GEN_SCHEDULE -eq 1 ]]; then
                    echo "Done."

                    exit 0
                fi
                
                break
                
                ;;
            [NnQq]* )
                echo 

                echo "Current schedule will be used."

                break
                
                ;;
            [A-Za-z]*) 
                echo 

                echo "Please answer [Y/n]."
                
                ;;
            * ) 
                echo "Please answer [Y/n]."
                
                ;;
        esac
    done
else
    echo -e "${YELLOW}WARNING:${NOCOLOR} rawSchedule.txt not found!"

    if [[ $NO_T -eq 1 ]]; then
        echo -e "${RED}ERROR:${NOCOLOR} Ship count not specified! MatchMaker cannot generate a schedule."

        echo "Stop."

        exit 1
    fi

    echo "A new rawSchedule.txt will be generated."

    run_matchmaker 
fi

sed 's/\*/ /g' "$SCRIPT_DIR/spreadsheetSCH.txt" > "$SCRIPT_DIR/.no_asterisks"

i=1

echo "Beginning ALLIANCE generation."

while read p; do
    ships="" 

    j=0

    for k in $p; do
        if [[ $j -ge 6 ]]; then break; fi

        ships+=" ${participants[k]}"

        let "j += 1"
    done
    
    printf -v matchNumber "%03d" $i
     
    assemble $ships "Match ${matchNumber} - ^1The Red Alliance^7" "Match ${matchNumber} - ^4The Blue Alliance^7" & 
    
    let "i += 1"
done <"$SCRIPT_DIR/.no_asterisks"

rm "$SCRIPT_DIR/.no_asterisks"

echo "Scheduler done."

echo "Lets get this tournament started!"

echo "Now import spreadsheetSCH.txt into the DRRT Datasheet."

while true; do
    read -p 'Open the drrt-scripts directory in Windows Explorer? [Y/n]: ' -n 1 -r

    case $REPLY in
        [Yy]* ) 
            echo 

            echo "Opening directory '$(wslpath -w "$SCRIPT_DIR")'. . ." 

            explorer.exe "$(wslpath -w "$SCRIPT_DIR")"

            break
            
            ;;
        [NnQq]* ) 
            echo 

            echo "Stop."

            break
            
            ;;
        [A-Za-z]* ) 
            echo

            echo "Answer [Y/n]."
            
            ;;
        ""* ) 
            echo "Answer [Y/n]."
            
            ;;
        * ) 
            echo

            echo "Answer [Y/n]."
            
            ;;
    esac
done
