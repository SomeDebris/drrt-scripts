#!/bin/bash
# DRRT Alliance Assembler, SUMMER DRRT
### REMEMBER! ONLY WORKS IN WSL!! ###

echo DRRT Alliance Assembler.
echo "Works only in WSL."

# $SCRIPT_DIR finds the directory the script is in
# $WHERE is the directory where the root DRRT folder is
# Makes it easier to reference the working directory.
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
WHERE="${SCRIPT_DIR}/../.."
echo $WHERE

# TODO: use getopts or something to get the options without
#       using a stupid string

#### FUNCTIONS

# Calls the matchmaker with the right parameters and 
# writes schedule.
# Made into a function because I use this multiple times.
# `-o` option for a small ship count.
# `$1` is the matchmaker options as a string.
run_matchmaker () {
    echo "Running MatchMaker.exe . . ."
    "$WHERE/Matchmaker/MatchMaker.exe" -o $1 >> "$WHERE/DRRT-6/scripts/rawSchedule.txt"

    echo "rawSchedule.txt generated with MatchMaker.exe output."
 
    echo "Contents of rawSchedule.txt:"
    cat "$WHERE/DRRT-6/scripts/rawSchedule.txt"
}

# all ship files are members of the ${participants[@]} array.
# Needed for the program to find all the ship files!
. "$WHERE/DRRT-6/scripts/shipIndex.conf"
#echo "shipIndex.conf contents:"
#cat "$WHERE/DRRT-6/scripts/shipIndex.conf"

# Deletes all Qualification fleet files created previously
# so that the DRRTassembler script doesn't have trouble
# saving new files in that directory.
# i.e. deletes contents of the 'Qualifications/' directory
echo "Deleting contents of 'Qualifications/' . . ."
rm $WHERE/DRRT-6/Qualifications/*

# If a match schedule file already exists, this asks the user
# if they want to use it to assemble alliances.
# Needed to 
if [ -f rawSchedule.txt ]; then
    echo "A match schedule already exists!"

    while true; do
        if [ $# -eq 0 ]; then
            #echo "No arguments supplied, using current schedule."
            REPLY="n"
        else
            read -p "Generate new schedule? [Y/n]: " -n 1 -r
        fi

        case $REPLY in
            [Yy]* ) 
                echo "Deleting 'rawSchedule.txt' . . ."
                rm "$WHERE/DRRT-6/scripts/rawSchedule.txt"
                rm "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt"
                echo "rawSchedule.txt deleted."
                
                # Remember, this is a function defined above
                run_matchmaker $1
                
                break;;
            [NnQq]* )
                echo 
                echo "Current schedule will be used."
                break;;
            [A-Za-z]*) 
                echo 
                echo "Please answer [Y/n].";;
            * ) 
                echo "Please answer [Y/n].";;
        esac
    done
else
    echo "A new rawSchedule.txt will be generated."

    # Program won't work if user doesn't send arguments!
    # Stop here with a more explanatory error message
    # instead of letting the MatchMaker freak out.
    if [ $# -eq 0 ]; then
        echo "Please specify arguments to pass to MatchMaker."
        echo "Stop."
        exit
    fi
    
    # Remember, this is a function defined above
    run_matchmaker $1
fi

# Create a spreadsheet-suitable match schedule file.
# Note that this doesnt allow for match schedules with more
# than 99 matches.
if [ ! -f "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt" ]; then

    echo "Creating spreadsheet-suitable schedule 'spreadsheetSCH.txt' . . ."
    grep '^ [0-9 ][0-9]:' "$WHERE/DRRT-6/scripts/rawSchedule.txt" | sed 's/^ [0-9 ][0-9]: *//' > "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt"
    echo "spreadsheetSCH.txt created."

else
    echo "Using current spreadsheetSCH.txt."
fi

# file '.no_asterisks' is temporary. Used to assemble alliances.
# Matchmaker.exe will append '*' to surrogate ships.
# This command will remove these asterisks in the file called '.no_asterisks'
# so that the next section doesnt get confused.
sed 's/\*/ /g' "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt" > "$WHERE/DRRT-6/scripts/.no_asterisks"
#cat .no_asterisks

i=1
while read p; do
    # use `$ships` variable because it's easier
    # to pass as an argument to the DRRTassembler.
    ships="" 
    
    # 'for' loop grabs the ships from shipIndex.conf 
    # and adds them to $ships.
    j=0
    for k in $p; do
        if [ $j -ge 6 ]; then break; fi
        ships+=" ${participants[k]}"
        let "j+=1"
    done
    
    # Prepend zeros to order alliances correctly in Reassembly's import
    # screen.
    printf -v matchNumber "%03d" $i
    
    #echo "Assembling match $matchNumber. . ."

    # Runs in background because this takes a while.
    ./DRRTassembler $ships "Match ${matchNumber} - ^1The Red Alliance^7" "Match ${matchNumber} - ^4The Blue Alliance^7" & 
    
    #echo "Assembler set loose!"
    
    let "i += 1"
done <"$WHERE/DRRT-6/scripts/.no_asterisks"

# `.no_asterisks` is a temporary file. Use `rawSchedule.txt` if you want to see
# the schedule!
rm "$WHERE/DRRT-6/scripts/.no_asterisks"

echo "Scheduler done."

echo "Lets get this tournament started!"
echo "Now import spreadsheetSCH.txt into the DRRT Datasheet."

while true; do
    read -p 'Open the scripts directory in Windows Explorer? [Y/n]: ' -n 1 -r

    case $REPLY in
        [Yy]* ) echo 
            echo "Opening directory '$(wslpath -w $WHERE)\DRRT-6\scripts'. . ." 
            explorer.exe "$(wslpath -w $WHERE)\DRRT-6\scripts"
            break;;

        [NnQq]* ) echo 
            echo "Stop."
            break;;

        [A-Za-z]* ) echo
            echo "Answer [Y/n].";;

        ""* ) echo "Answer [Y/n].";;

        * ) echo
            echo "Answer [Y/n].";;
    esac
done
