#!/bin/bash
# DRRT Alliance Assembler, SUMMER DRRT

# Input validation:
#if [ $# -eq 0 ]; then
#    echo "Please specify arguments to pass to MatchMaker."
#    exit
#fi

# where we are:
WHERE="/mnt/c/Users/Magnus/Desktop/ShipsNStuff/001_-_Debris_Regional_Tournament"
# $WHERE, but windows directory syntax
WIN_WHERE="C:\Users\Magnus\Desktop\ShipsNStuff\001_-_Debris_Regional_Tournament"

# all ship files are members of the ${participants[@]} array
. "$WHERE/DRRT-6/scripts/shipIndex.conf"
#echo "shipIndex.conf contents:"
#cat "$WHERE/DRRT-6/scripts/shipIndex.conf"

# Deletes all Qualification fleet files created previously
# i.e. deletes contents of the 'Qualifications/' directory
echo "Deleting contents of 'Qualifications/' . . ."
rm $WHERE/DRRT-6/Qualifications/*

# remove rawSchedule.txt if it already exists
if [ -f rawSchedule.txt ]; then
    echo "A match schedule already exists!"
    while true; do
        if [ $# -eq 0 ]; then
            echo "No arguments supplied, using current schedule."
            REPLY="n"
        else
            read -p "Generate new schedule? [Y/n]: " -n 1 -r
        fi
        case $REPLY in
            [Yy]* ) 
                echo "Deleting 'rawSchedule.txt' . . ."
                rm "$WHERE/DRRT-6/scripts/rawSchedule.txt"
                rm "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt"
                echo "rawSchedule.txt deleted."
                
                # Input validation:
                #if [ $# -eq 0 ]; then
                #    echo "Please specify arguments to pass to MatchMaker."
                #    echo "Stop."
                #    exit
                #fi
                
                # run the matchmaker with the quoted args from the initial call. 
                # add -o option to adapt for a small ship count. 
                # send the output to rawSchedule.txt
                echo "Running MatchMaker.exe . . ."
                "$WHERE/Matchmaker/MatchMaker.exe" -o $1 >> "$WHERE/DRRT-6/scripts/rawSchedule.txt"
                echo "rawSchedule.txt generated with MatchMaker.exe output."
                
                echo "Contents of rawSchedule.txt:"
                cat "$WHERE/DRRT-6/scripts/rawSchedule.txt"
                
                break;;
            [NnQq]* )
                echo 
                echo "Current schedule will be used."
                break;;
            [A-Za-z]*) 
                echo 
                echo "Please answer [Y/n].";;
            * ) 
                echo "Please answer [Y/n].";;
        esac
    done
else
    echo "A new rawSchedule.txt will be generated."
    # Input validation:
    if [ $# -eq 0 ]; then
        echo "Please specify arguments to pass to MatchMaker."
        echo "Stop."
        exit
    fi
    
    # run the matchmaker with the quoted args from the initial call. 
    # add -o option to adapt for a small ship count. 
    # send the output to rawSchedule.txt
    echo "Running MatchMaker.exe . . ."
    "$WHERE/Matchmaker/MatchMaker.exe" -o $1 >> "$WHERE/DRRT-6/scripts/rawSchedule.txt"
    echo "rawSchedule.txt generated with MatchMaker.exe output."
    
    echo "Contents of rawSchedule.txt:"
    cat "$WHERE/DRRT-6/scripts/rawSchedule.txt"
fi

# Create a spreadsheet-suitable match schedule file.
# Note that this doesnt allow for match schedules with more
# than 99 matches.
if [ ! -f "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt" ]; then
    echo "Creating spreadsheet-suitable schedule 'spreadsheetSCH.txt' . . ."
    grep '^ [0-9 ][0-9]:' "$WHERE/DRRT-6/scripts/rawSchedule.txt" | sed 's/^ [0-9 ][0-9]: *//' > "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt"
    echo "spreadsheetSCH.txt created."
else
    echo "Using current spreadsheetSCH.txt."
fi

# file '.no_asterisks' is temporary. Used to assemble alliances.
# Matchmaker.exe will append '*' to surrogate ships.
# This command will remove these asterisks in the file called '.no_asterisks'
# so that the next section doesnt get confused.
sed 's/\*/ /g' "$WHERE/DRRT-6/scripts/spreadsheetSCH.txt" > "$WHERE/DRRT-6/scripts/.no_asterisks"
#cat .no_asterisks

i=1
while read p; do
    
    # $ships is the list of arguments passed to DRRTassembler.
    ships="" 
    
    # 'for' loop grabs the ships from shipIndex.conf 
    # and adds them to $ships.
    j=0
    for k in $p; do
        if [ $j -ge 6 ]; then break; fi
        ships+=" ${participants[k]}"
        let "j+=1"
    done
    
    # 'printf' command creates $matchNumber, 
    # which is $i but with prepended zeros
    printf -v matchNumber "%03d" $i
    
    # notify user about which alliance is being assembled
    echo "Assembling match $matchNumber. . ."

    # Call the assembler
    ./DRRTassembler $ships "Match ${matchNumber} - ^1The Red Alliance^7" "Match ${matchNumber} - ^4The Blue Alliance^7" 
    
    echo "Assembler done"
    
    # increment the loop
    let "i += 1"
done <"$WHERE/DRRT-6/scripts/.no_asterisks"

# remove the no-asterisk schedule file.
rm "$WHERE/DRRT-6/scripts/.no_asterisks"

echo "Scheduler done."

echo "Lets get this tournament started!"
echo "Now import spreadsheetSCH.txt into the DRRT Datasheet."

# Ask the user if they want 
# to open scripts directory 
# with file explorer?
while true; do
    # Get user input
    read -p 'Open the scripts directory in Windows Explorer? [Y/n]: ' -n 1 -r
    case $REPLY in
        [Yy]* ) echo 
            echo "Opening directory '$WIN_WHERE\DRRT-6\scripts'. . ." 
            explorer.exe "$WIN_WHERE\DRRT-6\scripts"
            break;;
        [NnQq]* ) echo 
            echo "Stop."
            break;;
        [A-Za-z]* ) echo
            echo "Answer [Y/n].";;
        ""* ) echo "Answer [Y/n].";;
        * ) echo
            echo "Answer [Y/n].";;
    esac
done
